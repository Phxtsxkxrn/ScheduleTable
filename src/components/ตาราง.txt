import React, { useState, useEffect } from 'react';
import '../assets/st.css';
import Navbar from "./Navbar";
import Dropdown from './Dropdown';
import { db } from '../firebase';
import {
  collection,
  query, 
  where,
  getDocs,
  onSnapshot,
  and,
} from 'firebase/firestore';

const ScheduleTable = () => {
    const [courses, setCourses] = useState([]);
    const [selectedCourses, setSelectedCourses] = useState([]);
    const [duplicateCourse, setDuplicateCourse] = useState([]);
    const selectedCourseRef = collection(db, 'selected_course');
    const q = query(selectedCourseRef, where('status', '==', 'active'));
    //const courseRef = getDocs(q);
    useEffect(() => {
        const unsubscribe = onSnapshot(q, (snapshot) => {
          const newSelectedCourses = snapshot.docs.map((doc) => ({
            id: doc.id,
            ...doc.data(),
          }));
          setSelectedCourses(newSelectedCourses);
        });
    
        return () => {
          unsubscribe();
        };
      }, []);

    const timeSlots = Array.from({ length: 26 }, (_, index) => {
        const startHour = Math.floor(index / 2) + 7 < 10 ? '0' + `${Math.floor(index / 2) + 7}` : `${Math.floor(index / 2) + 7}`;
        const startMinute = index % 2 === 0 ? '00' : '30';
        const endHour = Math.floor((index+1)/ 2) + 7 < 10 ? '0' + `${Math.floor((index+1) / 2) + 7}` : `${Math.floor((index+1) / 2) + 7}`;
        const endMinute = (index + 1) % 2 === 0 ? '00' : '30';

        return `${startHour}:${startMinute}-${endHour}:${endMinute}`;
    });

    const daysOfWeek = ['จันทร์/MON', 'อังคาร/TUE', 'พุธ/WED', 'พฤหัสบดี/THU', 'ศุกร์/FRI', 'เสาร์/SAT', 'อาทิตย์/SUN'];

    // Function to simulate adding a course to the schedule
    // This should be replaced with your actual logic to add courses
    const addDummyCourse = () => {
        for (let i =0; i<selectedCourses.length; i++){
            setCourses(prevCourses => [...prevCourses, {
                id: prevCourses.length + 1,
                code: selectedCourses[i].code,
                curriculum: selectedCourses[i].grade,
                name: selectedCourses[i].name,
                credit: selectedCourses[i].credit,
                type: selectedCourses[i].type,
                day: selectedCourses[i].day,
                startTime: selectedCourses[i].TimeStart,
                endTime: selectedCourses[i].TimeStop,
            }]);
        }    
    };

    var dupCourse = []
    const checkDuplicatedTime = () => {
        for (let i=0; i<selectedCourses.length - 1; i++) {
            if (selectedCourses[i].day == selectedCourses[i + 1].day) {
                if (selectedCourses[i].TimeStart.split('-')[0] <= selectedCourses[i + 1].TimeStart.split('-')[0] && selectedCourses[i + 1].TimeStart.split('-')[0] <= selectedCourses[i].TimeStop.split('-')[0]) {
                    dupCourse.push(i+1)
                }
                else if (selectedCourses[i].TimeStart.split('-')[0] <= selectedCourses[i + 1].TimeStop.split('-')[0] && selectedCourses[i + 1].TimeStop.split('-')[0] <= selectedCourses[i].TimeStop.split('-')[0]) {
                    dupCourse.push(i+1)
                }
            }

        }
        setDuplicateCourse(dupCourse)
    };

    const changeColor = (course, dayIndex, timeIndex) => {
        if (course) {
            if (duplicateCourse.includes(course.id)) {
                return "red";
            } else {
                if (course.day === "MON") {
                    return "yellow";
                } else if (course.day === "TUE") {
                    return "blue"; // Example color for Tuesday
                } else if (course.day === "WED") {
                    return "orange"; // Example color for Wednesday
                } else if (course.day === "THU") {
                    return "black";
                 } else if (course.day === "FRI") {
                    return "green"; // Example color for Friday
                } else if (course.day === "SAT") {
                    return "purple"; // Example color for Saturday
                } else if (course.day === "SUN") {
                    return "pink"; // Example color for Sunday
                } else {
                    return "green"; // Default color for any day not specified
                }
            }
        } else {
            // Check if there's any course at the same time on the same day
            const coursesAtSameTime = courses.filter(
                (c) =>
                    c.day === daysOfWeek[dayIndex].split('/')[1] &&
                    c.startTime <= timeSlots[timeIndex].split('-')[0] &&
                    c.endTime >= timeSlots[timeIndex].split('-')[1]
            );
    
            if (coursesAtSameTime.length > 1) {
                return "red"; // Change color to indicate overlapping time slots
            }
    
            return "";
        }
    };
    
    return (
        <div> 
            <Navbar/>
            <div className='container'>
                <button 
                className="btn1"
                onClick={() => {
                    addDummyCourse();
                    checkDuplicatedTime();
                }}
                >
                <i class="fa-solid fa-magnifying-glass"></i> 
                </button>
                <div className="schedule-table-container mt-5">
                    <h2>ตารางสอน</h2>
                    <Dropdown/>
                    <table className="schedule-table">
                        <thead>
                            <tr>
                                <th>Day/Time</th>
                                {timeSlots.map((time, index) => (
                                    <th key={index}>{time}</th>
                                ))}
                            </tr>
                        </thead>
                        <tbody>
                        {daysOfWeek.map((day, dayIndex) => (
                                    <tr key={dayIndex}>
                                        <td>{day.split('/')[0]}</td>
                                        {timeSlots.map((time, timeIndex) => {
                                            const courseForThisSlot = courses.find(
                                                (course) =>
                                                    course.day === day.split('/')[1] &&
                                                    course.startTime <= time.split('-')[0] &&
                                                    course.endTime >= time.split('-')[1]
                                            );

                                            if (courseForThisSlot) {
                                                const isFirstCell =
                                                    timeIndex === 0 ||
                                                    !courses.find(
                                                        (course) =>
                                                            course.day === day.split('/')[1] &&
                                                            course.startTime <= timeSlots[timeIndex - 1].split('-')[0] &&
                                                            course.endTime >= timeSlots[timeIndex - 1].split('-')[1]
                                                    );

                                                if (isFirstCell) {
                                                    const startSlotIndex = timeIndex;
                                                    let colspan = 1;

                                                    while (
                                                        timeSlots[startSlotIndex + colspan] &&
                                                        courses.find(
                                                            (course) =>
                                                                course.day === day.split('/')[1] &&
                                                                course.startTime <= timeSlots[startSlotIndex + colspan].split('-')[0] &&
                                                                course.endTime >= timeSlots[startSlotIndex + colspan].split('-')[1]
                                                        )
                                                    ) {
                                                        colspan++;
                                                    }

                                                    return (
                                                        <td key={timeIndex} style={{ backgroundColor: changeColor(courseForThisSlot, dayIndex, timeIndex)}} colSpan={colspan}>
                                                            {`${courseForThisSlot.code} ${courseForThisSlot.name}`}
                                                        </td>
                                                    );
                                                } else {
                                                    return <td key={timeIndex} className="hidden-cell"></td>;
                                                }
                                            } else {
                                                return <td key={timeIndex}></td>;
                                            }
                                        })}
                                    </tr>
                                ))}
                        </tbody>
                    </table>

                    
                </div>
                <div className="course-detail-table mt-5">
                    <h2>รายละเอียดรายวิชา</h2>
                    <div className="card-container">
                        {courses.map((course, index) => (
                            <div className="card mb-3" key={index}>
                                <div className="card-body">
                                    <h5 className="card-title">รหัสวิชา: {course.code}</h5>
                                    <h6 className="card-subtitle mb-2 text-muted">หลักสูตร: {course.curriculum}</h6>
                                    <p className="card-text">ชื่อวิชา: {course.name}</p>
                                    <p className="card-text">หน่วยกิต: {course.credit}</p>
                                    <p className="card-text">ประเภท: {course.type}</p>
                                    <p className="card-text">วัน: {course.day}</p>
                                    <p className="card-text">เวลา: {course.startTime} - {course.endTime} น.</p>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ScheduleTable;

.schedule-table {
  border-collapse: collapse;
  border: 1px solid #f5ebe5;
  border-radius: 10px;
  overflow: hidden;
  width: 100%;
  margin-top: 20px;
  margin-bottom: 30px;
}

.schedule-table th,
.schedule-table td {
  border: 1px solid #ddd;
  padding: 5px; 
  font-size: 12px; 
  text-align: center;
  background-color: #f7f7f7;
}

.schedule-table th {
  background-color: #f5ebe5;
}

.schedule-table td {
  height: 50px;
  vertical-align: middle;
}

@media screen and (max-width: 600px) {
  .small-table .schedule-table {
    width: 100%;
  }
}

.hidden-cell {
  display: none;
}

.schedule-table .cellselected {
  border-radius: 6px !important;
  background-color: rgba(211, 224, 235, 0.448);
  padding: 5px; 
}

.card-more {
  display: none;
}

.card {
  width: 100%;
  height: 50%;
  border: 1px solid #ccc;
}